
project.ext {

  cfgVersion = '0.15.3'
  
  cfgGroup = 'org.openmuc.framework'

  cfgCopyDependencies = false

  cfgCopyToRoot = true

  cfgSignPom = false

  cfgRepository = project.properties.repository

  cfgSnapshotRepository = project.properties.snapshotRepository

  cfgRepositoryUser = project.properties.artifactoryUser

  cfgRepositoryPass = project.properties.artifactoryPass

  javaProjects = subprojects

  distributionProjects = javaProjects.findAll {
    it.getPath() == ':openmuc-core-api' ||
    it.getPath() == ':openmuc-core-spi' ||
    it.getPath() == ':openmuc-core-datamanager' ||
    it.getPath() == ':openmuc-datalogger-ascii' ||
    it.getPath() == ':openmuc-datalogger-slotsdb' ||
    it.getPath() == ':openmuc-driver-aggregator' ||
    it.getPath() == ':openmuc-driver-dlms' ||
    it.getPath() == ':openmuc-driver-ehz' ||
    it.getPath() == ':openmuc-driver-iec61850' ||
    it.getPath() == ':openmuc-driver-iec62056p21' ||
    it.getPath() == ':openmuc-driver-knx' ||
    it.getPath() == ':openmuc-driver-mbus' ||
    it.getPath() == ':openmuc-driver-modbus' ||
    it.getPath() == ':openmuc-driver-rest' ||
    it.getPath() == ':openmuc-driver-s7plc' ||
    it.getPath() == ':openmuc-driver-snmp' ||
    it.getPath() == ':openmuc-driver-wmbus' ||
    it.getPath() == ':openmuc-webui-spi' ||
    it.getPath() == ':openmuc-webui-base' ||
    it.getPath() == ':openmuc-webui-channelconfigurator' ||
    it.getPath() == ':openmuc-webui-dataplotter' ||
    it.getPath() == ':openmuc-webui-dataexporter' ||
    it.getPath() == ':openmuc-webui-channelaccesstool' ||
    it.getPath() == ':openmuc-webui-userconfigurator' ||
    it.getPath() == ':openmuc-webui-mediaviewer' ||
    it.getPath() == ':openmuc-server-restws'
  }

  docProjects = distributionProjects.findAll {
    it.getPath() == ':openmuc-core-api' ||
    it.getPath() == ':openmuc-core-spi' ||
    it.getPath() == ':openmuc-webui-spi'
  }

  repositoryProjects = javaProjects

}

tasks.withType(Tar) {

  into(project.name) {

    from('./') {
      include 'build.gradle'
      include 'configuration.gradle'
      include 'license/**'
      include 'doc/*.txt'
      include 'doc/userguide/' + project.name + '-doc*.html'
      include 'doc/userguide/' + project.name + '-doc_img/**'
      include 'build/libs-all/**'
      include 'build/docs/javadoc-all/**'
      include 'dependencies/**'

      include 'demo/framework/felix/**'
      include 'demo/framework/bundle/**'
      include 'demo/framework/conf/**'
      include 'demo/framework/dependencies/**'
      include 'demo/framework/README.txt'
      include 'demo/framework/run-openmuc.bat.winfile'
      include 'demo/framework/build.gradle'
      include 'demo/framework/update-bundles.sh'
      include 'demo/framework/run-openmuc.sh'
      include 'demo/projects/**'

      exclude '**/projects/**/bin'
      exclude '**/projects/**/build'
      exclude '**/projects/**/.settings'
      exclude '**/projects/**/.project'
      exclude '**/projects/**/.classpath'
      exclude '**/projects/**/.gradle'

      for (Project myproject: distributionProjects) {
	include myproject.getProjectDir().toString().substring((int)(getProjectDir().toString().size() + 1)) + '/**';
      }

    }

    if (name.equals("tar") ){
      exclude '**/dependencies/**/src'
    }

    from('./build/') {
      include 'settings.gradle'
    }
  }
}
